package com.excelr.service;

import com.excelr.dto.BookingDTO;
import com.excelr.dto.BookingResponseDTO;
import com.excelr.entity.Booking;
import com.excelr.entity.Room;
import com.excelr.dao.BookingRepository;
import com.excelr.dao.RoomRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class BookingService {

    @Autowired
    private BookingRepository bookingRepository;

    @Autowired
    private RoomRepository roomRepository;

    public Booking createBooking(BookingDTO bookingDTO) {
        Room room = roomRepository.findById(bookingDTO.getRoomId())
                .orElseThrow(() -> new IllegalArgumentException("Invalid room ID"));

        long nights = ChronoUnit.DAYS.between(bookingDTO.getCheckInDate(), bookingDTO.getCheckOutDate());
        double totalCost = nights * room.getPricePerNight();

        Booking booking = new Booking();
        booking.setRoom(room);
        booking.setCheckInDate(bookingDTO.getCheckInDate());
        booking.setCheckOutDate(bookingDTO.getCheckOutDate());
        booking.setTotalCost(totalCost);
        booking.setCustomerName(bookingDTO.getCustomerName());
        booking.setCustomerEmail(bookingDTO.getCustomerEmail());
        booking.setCancellationStatus(false);
        booking.setRefundAmount(0.0);

        return bookingRepository.save(booking);
    }

    public List<BookingResponseDTO> getAllBookings() {
        List<Booking> bookings = bookingRepository.findAll();
        return bookings.stream().map(this::convertToDto).collect(Collectors.toList());
    }

    public List<BookingResponseDTO> findBookingsByCustomerId(int customerId) {
        List<Booking> bookings = bookingRepository.findByCustomerId(customerId);
        return bookings.stream().map(this::convertToDto).collect(Collectors.toList());
    }

    private BookingResponseDTO convertToDto(Booking booking) {
        Room room = booking.getRoom();
        return new BookingResponseDTO(
                booking.getId(),
                room.getId(),
                room.getName(),
                room.getHotel().getName(),
                booking.getCheckInDate(),
                booking.getCheckOutDate(),
                booking.getTotalCost(),
                booking.getCustomerName(),
                booking.getCustomerEmail(),
                booking.isCancellationStatus(),
                booking.getRefundAmount()
        );
    }
}
