package com.excelr.service;

import com.excelr.dto.BookingDTO;
import com.excelr.entity.Booking;
import com.excelr.entity.Customer;
import com.excelr.entity.Room;
import com.excelr.dao.BookingRepository;
import com.excelr.dao.CustomerRepository;
import com.excelr.dao.RoomRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
public class BookingService {

    @Autowired
    private BookingRepository bookingRepository;

    @Autowired
    private RoomRepository roomRepository;

    @Autowired
    private CustomerRepository customerRepository;

    public Booking createBooking(BookingDTO bookingDTO) {
        Room room = roomRepository.findById(bookingDTO.getRoomId())
                .orElseThrow(() -> new IllegalArgumentException("Invalid room ID"));

        Customer customer = customerRepository.findById(bookingDTO.getCustomerId())
                .orElseThrow(() -> new IllegalArgumentException("Invalid customer ID"));

        // Calculate total cost based on room price and duration
        long nights = ChronoUnit.DAYS.between(bookingDTO.getCheckInDate(), bookingDTO.getCheckOutDate());
        double totalCost = nights * room.getPricePerNight();

        Booking booking = new Booking();
        booking.setRoom(room);
        booking.setCustomer(customer);  // Set the customer here
        booking.setCheckInDate(bookingDTO.getCheckInDate());
        booking.setCheckOutDate(bookingDTO.getCheckOutDate());
        booking.setTotalCost(totalCost);
        booking.setCustomerName(bookingDTO.getCustomerName());
        booking.setCustomerEmail(bookingDTO.getCustomerEmail());
        booking.setCancellationStatus(false);
        booking.setRefundAmount(0.0);

        return bookingRepository.save(booking);
    }

    public Booking cancelBooking(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid booking ID"));

        if (!booking.isCancellationStatus()) {
            double refundAmount = calculateRefund(booking);
            booking.setRefundAmount(refundAmount);
            booking.setCancellationStatus(true);
        }

        return bookingRepository.save(booking);
    }

    private double calculateRefund(Booking booking) {
        // Example: Full refund if cancelled more than 7 days before check-in
        long daysUntilCheckIn = ChronoUnit.DAYS.between(LocalDate.now(), booking.getCheckInDate());
        if (daysUntilCheckIn > 7) {
            return booking.getTotalCost();
        } else if (daysUntilCheckIn >= 3) {
            return booking.getTotalCost() * 0.5;
        } else {
            return 0.0;
        }
    }

    public List<Booking> getAllBookings() {
        return bookingRepository.findAll();
    }

    public List<Booking> findBookingsByCustomerId(int customerId) {
        return bookingRepository.findByCustomerId(customerId);
    }
}
